services:
  elasticsearch-secure:
    image: ${ELASTICSEARCH_IMAGE}
    container_name: elasticsearch
    hostname: ${ELASTICSEARCH_HOST}
    depends_on:
      certificates_setup:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: "unless-stopped"
    ports:
    - ${ELASTICSEARCH_PUBLISH_PORT}:9200
    environment:
    - discovery.type=single-node
    - node.name=softwareag
    - cluster.name=softwareag
    - bootstrap.memory_lock=true
    - xpack.security.enabled=true
    - xpack.security.http.ssl.enabled=true
    - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
    - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
    - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
    - xpack.security.http.ssl.verification_mode=certificate
    - xpack.security.transport.ssl.enabled=true
    - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
    - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
    - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
    - xpack.security.transport.ssl.verification_mode=certificate
    - xpack.license.self_generated.type=basic
    mem_limit: 1073741824
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s --cacert ${ELASTICSEARCH_CERTPATH} https://localhost:${ELASTICSEARCH_PUBLISH_PORT} -u \"${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}\"",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
    - es-data:/usr/share/elasticsearch/data
    - es-certs:/usr/share/elasticsearch/config/certs
    networks:
    - softwareag-api-management

  certificates_setup:
    container_name: elasticsearch-certs-generator
    image: ${ELASTICSEARCH_IMAGE}
    volumes:
      - es-certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTICSEARCH_PASSWORD} == x ]; then
          echo "Set the ELASTICSEARCH_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 755 \{\} \;;
        find . -type f -exec chmod 644 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert ${ELASTICSEARCH_CERTPATH} https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f ${ELASTICSEARCH_CERTPATH} ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - softwareag-api-management