apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.applications.ingress.name }}
  namespace: {{ default "control-plane" .Release.Namespace }}
spec:
  replicas: {{ .Values.applications.ingress.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.applications.ingress.name }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.applications.ingress.name }}
        date: "{{ now | unixEpoch }}"
    spec:
      automountServiceAccountToken: false
      containers:
      - image: {{ .Values.applications.ingress.imageName }}:{{ .Values.applications.ingress.imageTag }}
        name: {{ .Values.applications.ingress.name }}
        envFrom:
        - configMapRef:
            name: {{ .Values.applications.ingress.name }}-config
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: true
          runAsUser: 1724
        resources:
          limits:
            cpu: {{ .Values.applications.ingress.resources.limits.cpu }}
            memory: {{ .Values.applications.ingress.resources.limits.memory }}
          requests:
            cpu: {{ .Values.applications.ingress.resources.requests.cpu }}
            memory: {{ .Values.applications.ingress.resources.requests.memory }}
        ports:
          - containerPort: 8080
            name: http
        readinessProbe:
          httpGet:
            path: /api/ingress/health/readiness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /api/ingress/health/liveness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
      terminationGracePeriodSeconds: 30
---